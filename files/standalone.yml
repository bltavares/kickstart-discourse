# this is the base templates used, you can cut it down to include less functionality per container
templates:
  - "templates/cron.template.yml"
  - "templates/postgres.template.yml"
  - "templates/redis.template.yml"
  - "templates/sshd.template.yml"
  - "templates/web.template.yml"

# which ports to expose?
expose:
  - "80:80"   # fwd host port 80   to container port 80 (http)
  - "2222:22" # fwd host port 2222 to container port 22 (ssh)

params:
  # git revision to run
  version: HEAD

env:
  # comma-separated emails
  DISCOURSE_DEVELOPER_EMAILS: 'connect+discourse@bltavares.com'
  # CHANGE ME to your hostname
  DISCOURSE_HOSTNAME: 'discourse.bltavares.com'
  # SET ME to your smtp server eg mandrill
  # don't forget to set mail
  DISCOURSE_SMTP_ADDRESS: smtp.example.com          # (mandatory)
  # DISCOURSE_SMTP_PORT: 587                        # (optional)
  # DISCOURSE_SMTP_USER_NAME: user@example.com      # (optional)
  # DISCOURSE_SMTP_PASSWORD: p@ssword               # (optional)

# These containers are stateless, all the data is stored in /shared
volumes:
  - volume:
      host: /var/docker/shared/standalone
      guest: /shared

# you may use the docker manager to upgrade and monitor your docker image
# UI will be visible at http://yoursite.com/admin/docker
hooks:
  after_code:
    - exec:
        cd: $home/plugins
        cmd:
          - mkdir -p plugins
          - git clone https://github.com/discourse/docker_manager.git

# Remember, this is YAML syntax - you can only have one block with a name
run:
  - exec: echo "Beginning of custom commands"

  ## If you want to configure password login for root, uncomment and change:
  #- exec: apt-get -y install whois # for mkpasswd
  ## Use only one of the following lines:
  #- exec: /usr/sbin/usermod -p 'PASSWORD_HASH' root
  #- exec: /usr/sbin/usermod -p "$(mkpasswd -m sha-256 'RAW_PASSWORD')" root

  ## If you want to authorized additional users, uncomment and change:
  #- exec: ssh-import-id username
  #- exec: ssh-import-id anotherusername

  - exec: echo "End of custom commands"
  - exec: awk -F\# '{print $1;}' ~/.ssh/authorized_keys | awk 'BEGIN { print "Authorized SSH keys for this container:"; } NF>=2 {print $NF;}'
